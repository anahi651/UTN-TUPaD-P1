#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
#entre 1 y el n√∫mero que indique el usuario
#Funci√≥n recursiva que calcule el factorial de un n√∫mero
def factorial(n):
    # Caso base: si n es 0  su factorial es 1
    if n == 0:
        return 1
    # Llamada recursiva
    else:
        return n * factorial(n - 1)
    
#Pedir n√∫mero al usuario
ultimo_factorial=int(input("Ingrese un n√∫mero entero positivo:"))

# calcular  factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario
#Recorre los n√∫meros desde 1 hasta el n√∫mero ingresado (inclusive).
for i in range(1, ultimo_factorial + 1): 
#Llama a la funci√≥n factorial(i) para calcular el factorial de ese n√∫mero.
    print(f"{i}! = {factorial(i)}")           

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
# Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci_recursivo(posicion):
#Cuando la posici√≥n es 0 o 1, se devuelve ese mismo n√∫mero.Primeros dos t√©rminos de la secuencia.
    if posicion==0:
        return 0
    elif posicion ==1:
        return 1
    else:
#Llamada recursiva.Para cualquier posici√≥n ‚â• 2, se calcula
        return fibonacci_recursivo(posicion-1)+ fibonacci_recursivo(posicion-2)

#Muestra la serie completa hasta la posici√≥n que el usuario especifique. 
#Solicitar posicion

Ultima_posicion=int(input("Ingrese un n√∫mero entero positivo:"))

for i in range (Ultima_posicion):
    print(f"En la posicion {i} obtenemos el valor de fibonacci:{fibonacci_recursivo(i)}")


#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1)
#. Prueba esta funci√≥n en un algoritmo general.

#Funcion recursiva que calcula la potencia parametros base y el expnente

def potencia_recursiva(base, exponente):
#si el exponente es 1 el resultado es 0, esta es la condicion base de la funcion 
    if exponente==0:
        return 1
#Si el exponente no es 0 devolvemos la recursion la funcion se llama a s√≠ misma con el exponente reducido en 1y multiplica la base por ese resultado
    else:
        return base * potencia_recursiva(base, exponente-1)
    
#. Prueba esta funci√≥n en un algoritmo general. 
# Solicitar los valores al usuario
base = int(input("Ingres√° la base (n√∫mero entero): "))
exponente = int(input("Ingres√° el exponente (entero positivo): "))

if exponente<0:
    print("Solo se permite el ingreso de exponente positivo.")
else:
    resultado=potencia_recursiva(base,exponente)
    print(f"{base}^{exponente}= {resultado}")